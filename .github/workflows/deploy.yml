# ==============================================================================
#                 GitHub Actions Workflow for Deploying to GitHub Pages
# ==============================================================================
#
# Workflow Name:
#   Name displayed on the GitHub Actions page
name: Deploy to GitHub Pages

# Triggers:
#   - Runs automatically on pushes to the `main` branch.
#   - `workflow_dispatch` allows manual triggering from the Actions page.
on:
  push:
    branches:
      - main
  workflow_dispatch:

# Permissions:
#   Standard permissions required for deploying to GitHub Pages.
permissions:
  contents: read
  pages: write
  id-token: write

# Jobs:
#   Defines the tasks to be executed in the workflow.
jobs:
  deploy:
    # Environment Configuration:
    #   Specifies the deployment environment, pointing to GitHub Pages.
    #   The `url` will display the live site URL upon completion.
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # Runner Environment:
    #   Uses the latest version of Ubuntu as the execution environment.
    runs-on: ubuntu-latest

    # Steps:
    #   Defines the sequential steps to be executed in this job.
    steps:
      # Step 1: Checkout Code
      #   Uses the official `checkout` action to get your repository code.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Create Firebase Config from Secrets
      #   This is the core step to fix the original problem.
      #   It copies the template and uses `sed` to replace placeholders
      #   with the actual keys stored in GitHub Secrets.
      - name: Create Firebase Config from Secrets
        run: |
          echo "ðŸš€ Generating firebase-config.js from template..."
          cp firebase-config.template.js firebase-config.js
          
          sed -i 's|__API_KEY__|${{ secrets.FIREBASE_API_KEY }}|g' firebase-config.js
          sed -i 's|__AUTH_DOMAIN__|${{ secrets.FIREBASE_AUTH_DOMAIN }}|g' firebase-config.js
          sed -i 's|__PROJECT_ID__|${{ secrets.FIREBASE_PROJECT_ID }}|g' firebase-config.js
          sed -i 's|__STORAGE_BUCKET__|${{ secrets.FIREBASE_STORAGE_BUCKET }}|g' firebase-config.js
          sed -i 's|__SENDER_ID__|${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}|g' firebase-config.js
          sed -i 's|__APP_ID__|${{ secrets.FIREBASE_APP_ID }}|g' firebase-config.js
          sed -i 's|__MEASUREMENT_ID__|${{ secrets.FIREBASE_MEASUREMENT_ID }}|g' firebase-config.js

          echo "âœ… firebase-config.js generated successfully."

      # Step 3: Setup GitHub Pages
      #   Uses the official `configure-pages` action to set up the Pages environment.
      - name: Setup GitHub Pages
        uses: actions/configure-pages@v5

      # Step 4: Upload Deployment Artifact
      #   Packages and uploads the entire project directory (which now includes
      #   the generated `firebase-config.js`). `path: '.'` means the current directory.
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      # Step 5: Deploy to GitHub Pages
      #   Uses the official `deploy-pages` action. This step automatically
      #   retrieves the artifact from the previous step and deploys it.
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4